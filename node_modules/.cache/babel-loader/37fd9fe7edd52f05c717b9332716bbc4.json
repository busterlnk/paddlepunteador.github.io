{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar NOTHING = typeof Symbol !== \"undefined\" ? Symbol(\"immer-nothing\") : defineProperty({}, \"immer-nothing\", true);\nvar DRAFTABLE = typeof Symbol !== \"undefined\" ? Symbol(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = typeof Symbol !== \"undefined\" ? Symbol(\"immer-state\") : \"__$immer_state\";\n\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\n\nfunction isDraftable(value) {\n  if (!value || (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) !== \"object\") return false;\n  if (Array.isArray(value)) return true;\n  var proto = Object.getPrototypeOf(value);\n  if (!proto || proto === Object.prototype) return true;\n  return !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE];\n}\n\nfunction original(value) {\n  if (value && value[DRAFT_STATE]) {\n    return value[DRAFT_STATE].base;\n  } // otherwise return undefined\n\n}\n\nvar assign = Object.assign || function assign(target, value) {\n  for (var key in value) {\n    if (has(value, key)) {\n      target[key] = value[key];\n    }\n  }\n\n  return target;\n};\n\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : Object.getOwnPropertyNames;\n\nfunction shallowCopy(base) {\n  var invokeGetters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (Array.isArray(base)) return base.slice();\n  var clone = Object.create(Object.getPrototypeOf(base));\n  ownKeys(base).forEach(function (key) {\n    if (key === DRAFT_STATE) {\n      return; // Never copy over draft state.\n    }\n\n    var desc = Object.getOwnPropertyDescriptor(base, key);\n\n    if (desc.get) {\n      if (!invokeGetters) {\n        throw new Error(\"Immer drafts cannot have computed properties\");\n      }\n\n      desc.value = desc.get.call(base);\n    }\n\n    if (desc.enumerable) {\n      clone[key] = desc.value;\n    } else {\n      Object.defineProperty(clone, key, {\n        value: desc.value,\n        writable: true,\n        configurable: true\n      });\n    }\n  });\n  return clone;\n}\n\nfunction each(value, cb) {\n  if (Array.isArray(value)) {\n    for (var i = 0; i < value.length; i++) {\n      cb(i, value[i], value);\n    }\n  } else {\n    ownKeys(value).forEach(function (key) {\n      return cb(key, value[key], value);\n    });\n  }\n}\n\nfunction isEnumerable(base, prop) {\n  return Object.getOwnPropertyDescriptor(base, prop).enumerable;\n}\n\nfunction has(thing, prop) {\n  return Object.prototype.hasOwnProperty.call(thing, prop);\n}\n\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n} // @ts-check\n\n\nvar descriptors = {}; // For nested produce calls:\n\nvar scopes = [];\n\nvar currentScope = function currentScope() {\n  return scopes[scopes.length - 1];\n};\n\nfunction willFinalize(result, baseDraft, needPatches) {\n  var scope = currentScope();\n  scope.forEach(function (state) {\n    return state.finalizing = true;\n  });\n\n  if (result === undefined || result === baseDraft) {\n    if (needPatches) markChangesRecursively(baseDraft); // This is faster when we don't care about which attributes changed.\n\n    markChangesSweep(scope);\n  }\n}\n\nfunction createDraft(base, parent) {\n  var isArray = Array.isArray(base);\n  var draft = clonePotentialDraft(base);\n  each(draft, function (prop) {\n    proxyProperty(draft, prop, isArray || isEnumerable(base, prop));\n  }); // See \"proxy.js\" for property documentation.\n\n  var state = {\n    scope: parent ? parent.scope : currentScope(),\n    modified: false,\n    finalizing: false,\n    // es5 only\n    finalized: false,\n    assigned: {},\n    parent: parent,\n    base: base,\n    draft: draft,\n    copy: null,\n    revoke: revoke,\n    revoked: false // es5 only\n\n  };\n  createHiddenProperty(draft, DRAFT_STATE, state);\n  state.scope.push(state);\n  return draft;\n}\n\nfunction revoke() {\n  this.revoked = true;\n}\n\nfunction source(state) {\n  return state.copy || state.base;\n}\n\nfunction _get(state, prop) {\n  assertUnrevoked(state);\n  var value = source(state)[prop]; // Drafts are only created for proxyable values that exist in the base state.\n\n  if (!state.finalizing && value === state.base[prop] && isDraftable(value)) {\n    prepareCopy(state);\n    return state.copy[prop] = createDraft(value, state);\n  }\n\n  return value;\n}\n\nfunction _set(state, prop, value) {\n  assertUnrevoked(state);\n  state.assigned[prop] = true;\n\n  if (!state.modified) {\n    if (is(source(state)[prop], value)) return;\n    markChanged(state);\n    prepareCopy(state);\n  }\n\n  state.copy[prop] = value;\n}\n\nfunction markChanged(state) {\n  if (!state.modified) {\n    state.modified = true;\n    if (state.parent) markChanged(state.parent);\n  }\n}\n\nfunction prepareCopy(state) {\n  if (!state.copy) state.copy = clonePotentialDraft(state.base);\n}\n\nfunction clonePotentialDraft(base) {\n  var state = base && base[DRAFT_STATE];\n\n  if (state) {\n    state.finalizing = true;\n    var draft = shallowCopy(state.draft, true);\n    state.finalizing = false;\n    return draft;\n  }\n\n  return shallowCopy(base);\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n  var desc = descriptors[prop];\n\n  if (desc) {\n    desc.enumerable = enumerable;\n  } else {\n    descriptors[prop] = desc = {\n      configurable: true,\n      enumerable: enumerable,\n      get: function get$$1() {\n        return _get(this[DRAFT_STATE], prop);\n      },\n      set: function set$$1(value) {\n        _set(this[DRAFT_STATE], prop, value);\n      }\n    };\n  }\n\n  Object.defineProperty(draft, prop, desc);\n}\n\nfunction assertUnrevoked(state) {\n  if (state.revoked === true) throw new Error(\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + JSON.stringify(source(state)));\n} // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\nfunction markChangesSweep(scope) {\n  // The natural order of drafts in the `scope` array is based on when they\n  // were accessed. By processing drafts in reverse natural order, we have a\n  // better chance of processing leaf nodes first. When a leaf node is known to\n  // have changed, we can avoid any traversal of its ancestor nodes.\n  for (var i = scope.length - 1; i >= 0; i--) {\n    var state = scope[i];\n\n    if (state.modified === false) {\n      if (Array.isArray(state.base)) {\n        if (hasArrayChanges(state)) markChanged(state);\n      } else if (hasObjectChanges(state)) markChanged(state);\n    }\n  }\n}\n\nfunction markChangesRecursively(object) {\n  if (!object || (typeof object === \"undefined\" ? \"undefined\" : _typeof(object)) !== \"object\") return;\n  var state = object[DRAFT_STATE];\n  if (!state) return;\n  var base = state.base,\n      draft = state.draft,\n      assigned = state.assigned;\n\n  if (!Array.isArray(object)) {\n    // Look for added keys.\n    Object.keys(draft).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (base[key] === undefined && !has(base, key)) {\n        assigned[key] = true;\n        markChanged(state);\n      } else if (!assigned[key]) {\n        // Only untouched properties trigger recursion.\n        markChangesRecursively(draft[key]);\n      }\n    }); // Look for removed keys.\n\n    Object.keys(base).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (draft[key] === undefined && !has(draft, key)) {\n        assigned[key] = false;\n        markChanged(state);\n      }\n    });\n  } else if (hasArrayChanges(state)) {\n    markChanged(state);\n    assigned.length = true;\n\n    if (draft.length < base.length) {\n      for (var i = draft.length; i < base.length; i++) {\n        assigned[i] = false;\n      }\n    } else {\n      for (var _i = base.length; _i < draft.length; _i++) {\n        assigned[_i] = true;\n      }\n    }\n\n    for (var _i2 = 0; _i2 < draft.length; _i2++) {\n      // Only untouched indices trigger recursion.\n      if (assigned[_i2] === undefined) markChangesRecursively(draft[_i2]);\n    }\n  }\n}\n\nfunction hasObjectChanges(state) {\n  var base = state.base,\n      draft = state.draft; // Search for added keys. Start at the back, because non-numeric keys\n  // are ordered by time of definition on the object.\n\n  var keys = Object.keys(draft);\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (base[keys[i]] === undefined && !has(base, keys[i])) {\n      return true;\n    }\n  } // Since no keys have been added, we can compare lengths to know if an\n  // object has been deleted.\n\n\n  return keys.length !== Object.keys(base).length;\n}\n\nfunction hasArrayChanges(state) {\n  var draft = state.draft;\n  if (draft.length !== state.base.length) return true; // See #116\n  // If we first shorten the length, our array interceptors will be removed.\n  // If after that new items are added, result in the same original length,\n  // those last items will have no intercepting property.\n  // So if there is no own descriptor on the last position, we know that items were removed and added\n  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n  // the last one\n\n  var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n  if (descriptor && !descriptor.get) return true; // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n  return false;\n}\n\nfunction createHiddenProperty(target, prop, value) {\n  Object.defineProperty(target, prop, {\n    value: value,\n    enumerable: false,\n    writable: true\n  });\n}\n\nvar legacyProxy = Object.freeze({\n  scopes: scopes,\n  currentScope: currentScope,\n  willFinalize: willFinalize,\n  createDraft: createDraft\n}); // @ts-check\n// For nested produce calls:\n\nvar scopes$1 = [];\n\nvar currentScope$1 = function currentScope() {\n  return scopes$1[scopes$1.length - 1];\n}; // Do nothing before being finalized.\n\n\nfunction willFinalize$1() {}\n\nfunction createDraft$1(base, parent) {\n  var state = {\n    // Track which produce call this is associated with.\n    scope: parent ? parent.scope : currentScope$1(),\n    // True for both shallow and deep changes.\n    modified: false,\n    // Used during finalization.\n    finalized: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned: {},\n    // The parent draft state.\n    parent: parent,\n    // The base state.\n    base: base,\n    // The base proxy.\n    draft: null,\n    // Any property proxies.\n    drafts: {},\n    // The base copy with any updated values.\n    copy: null,\n    // Called by the `produce` function.\n    revoke: null\n  };\n\n  var _ref = Array.isArray(base) ? Proxy.revocable([state], arrayTraps) : Proxy.revocable(state, objectTraps),\n      revoke = _ref.revoke,\n      proxy = _ref.proxy;\n\n  state.draft = proxy;\n  state.revoke = revoke;\n  state.scope.push(state);\n  return proxy;\n}\n\nvar objectTraps = {\n  get: get$1,\n  has: function has$$1(target, prop) {\n    return prop in source$1(target);\n  },\n  ownKeys: function ownKeys$$1(target) {\n    return Reflect.ownKeys(source$1(target));\n  },\n  set: set$1,\n  deleteProperty: deleteProperty,\n  getOwnPropertyDescriptor: getOwnPropertyDescriptor,\n  defineProperty: function defineProperty() {\n    throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\"); // prettier-ignore\n  },\n  getPrototypeOf: function getPrototypeOf(target) {\n    return Object.getPrototypeOf(target.base);\n  },\n  setPrototypeOf: function setPrototypeOf() {\n    throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n  }\n};\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if (isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports deleting array indices\"); // prettier-ignore\n  }\n\n  return objectTraps.deleteProperty.call(this, state[0], prop);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if (prop !== \"length\" && isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports setting array indices and the 'length' property\"); // prettier-ignore\n  }\n\n  return objectTraps.set.call(this, state[0], prop, value);\n};\n\nfunction source$1(state) {\n  return state.copy || state.base;\n}\n\nfunction get$1(state, prop) {\n  if (prop === DRAFT_STATE) return state;\n  var drafts = state.drafts; // Check for existing draft in unmodified state.\n\n  if (!state.modified && has(drafts, prop)) {\n    return drafts[prop];\n  }\n\n  var value = source$1(state)[prop];\n  if (state.finalized || !isDraftable(value)) return value; // Check for existing draft in modified state.\n\n  if (state.modified) {\n    // Assigned values are never drafted. This catches any drafts we created, too.\n    if (value !== state.base[prop]) return value; // Store drafts on the copy (when one exists).\n\n    drafts = state.copy;\n  }\n\n  return drafts[prop] = createDraft$1(value, state);\n}\n\nfunction set$1(state, prop, value) {\n  if (!state.modified) {\n    // Optimize based on value's truthiness. Truthy values are guaranteed to\n    // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n    // values may be drafts, but falsy values are never drafts.\n    var isUnchanged = value ? is(state.base[prop], value) || value === state.drafts[prop] : is(state.base[prop], value) && prop in state.base;\n    if (isUnchanged) return true;\n    markChanged$1(state);\n  }\n\n  state.assigned[prop] = true;\n  state.copy[prop] = value;\n  return true;\n}\n\nfunction deleteProperty(state, prop) {\n  // The `undefined` check is a fast path for pre-existing keys.\n  if (state.base[prop] !== undefined || prop in state.base) {\n    state.assigned[prop] = false;\n    markChanged$1(state);\n  }\n\n  if (state.copy) delete state.copy[prop];\n  return true;\n}\n\nfunction getOwnPropertyDescriptor(state, prop) {\n  var owner = source$1(state);\n  var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n\n  if (desc) {\n    desc.writable = true;\n    desc.configurable = !Array.isArray(owner) || prop !== \"length\";\n  }\n\n  return desc;\n}\n\nfunction markChanged$1(state) {\n  if (!state.modified) {\n    state.modified = true;\n    state.copy = assign(shallowCopy(state.base), state.drafts);\n    state.drafts = null;\n    if (state.parent) markChanged$1(state.parent);\n  }\n}\n\nvar modernProxy = Object.freeze({\n  scopes: scopes$1,\n  currentScope: currentScope$1,\n  willFinalize: willFinalize$1,\n  createDraft: createDraft$1\n});\n\nfunction generatePatches(state, basePath, patches, inversePatches) {\n  Array.isArray(state.base) ? generateArrayPatches(state, basePath, patches, inversePatches) : generateObjectPatches(state, basePath, patches, inversePatches);\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n  var base = state.base,\n      copy = state.copy,\n      assigned = state.assigned;\n  var minLength = Math.min(base.length, copy.length); // Look for replaced indices.\n\n  for (var i = 0; i < minLength; i++) {\n    if (assigned[i] && base[i] !== copy[i]) {\n      var path = basePath.concat(i);\n      patches.push({\n        op: \"replace\",\n        path: path,\n        value: copy[i]\n      });\n      inversePatches.push({\n        op: \"replace\",\n        path: path,\n        value: base[i]\n      });\n    }\n  } // Did the array expand?\n\n\n  if (minLength < copy.length) {\n    for (var _i = minLength; _i < copy.length; _i++) {\n      patches.push({\n        op: \"add\",\n        path: basePath.concat(_i),\n        value: copy[_i]\n      });\n    }\n\n    inversePatches.push({\n      op: \"replace\",\n      path: basePath.concat(\"length\"),\n      value: base.length\n    });\n  } // ...or did it shrink?\n  else if (minLength < base.length) {\n    patches.push({\n      op: \"replace\",\n      path: basePath.concat(\"length\"),\n      value: copy.length\n    });\n\n    for (var _i2 = minLength; _i2 < base.length; _i2++) {\n      inversePatches.push({\n        op: \"add\",\n        path: basePath.concat(_i2),\n        value: base[_i2]\n      });\n    }\n  }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n  var base = state.base,\n      copy = state.copy;\n  each(state.assigned, function (key, assignedValue) {\n    var origValue = base[key];\n    var value = copy[key];\n    var op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\";\n    if (origValue === value && op === \"replace\") return;\n    var path = basePath.concat(key);\n    patches.push(op === \"remove\" ? {\n      op: op,\n      path: path\n    } : {\n      op: op,\n      path: path,\n      value: value\n    });\n    inversePatches.push(op === \"add\" ? {\n      op: \"remove\",\n      path: path\n    } : op === \"remove\" ? {\n      op: \"add\",\n      path: path,\n      value: origValue\n    } : {\n      op: \"replace\",\n      path: path,\n      value: origValue\n    });\n  });\n}\n\nfunction applyPatches(draft, patches) {\n  for (var i = 0; i < patches.length; i++) {\n    var patch = patches[i];\n    var path = patch.path;\n\n    if (path.length === 0 && patch.op === \"replace\") {\n      draft = patch.value;\n    } else {\n      var base = draft;\n\n      for (var _i3 = 0; _i3 < path.length - 1; _i3++) {\n        base = base[path[_i3]];\n        if (!base || (typeof base === \"undefined\" ? \"undefined\" : _typeof(base)) !== \"object\") throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")); // prettier-ignore\n      }\n\n      var key = path[path.length - 1];\n\n      switch (patch.op) {\n        case \"replace\":\n        case \"add\":\n          // TODO: add support is not extensive, it does not support insertion or `-` atm!\n          base[key] = patch.value;\n          break;\n\n        case \"remove\":\n          if (Array.isArray(base)) {\n            if (key !== base.length - 1) throw new Error(\"Only the last index of an array can be removed, index: \" + key + \", length: \" + base.length); // prettier-ignore\n\n            base.length -= 1;\n          } else {\n            delete base[key];\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported patch operation: \" + patch.op);\n      }\n    }\n  }\n\n  return draft;\n}\n\nfunction verifyMinified() {}\n\nvar configDefaults = {\n  useProxies: typeof Proxy !== \"undefined\" && typeof Reflect !== \"undefined\",\n  autoFreeze: typeof process !== \"undefined\" ? process.env.NODE_ENV !== \"production\" : verifyMinified.name === \"verifyMinified\",\n  onAssign: null,\n  onDelete: null,\n  onCopy: null\n};\n\nvar Immer = function () {\n  function Immer(config) {\n    classCallCheck(this, Immer);\n    assign(this, configDefaults, config);\n    this.setUseProxies(this.useProxies);\n    this.produce = this.produce.bind(this);\n  }\n\n  createClass(Immer, [{\n    key: \"produce\",\n    value: function produce(base, recipe, patchListener) {\n      var _this = this; // curried invocation\n\n\n      if (typeof base === \"function\" && typeof recipe !== \"function\") {\n        var defaultBase = recipe;\n        recipe = base; // prettier-ignore\n\n        return function () {\n          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultBase;\n          return _this.produce(base, function (draft) {\n            var _recipe;\n\n            return (_recipe = recipe).call.apply(_recipe, [draft, draft].concat(args));\n          });\n        };\n      } // prettier-ignore\n\n\n      {\n        if (typeof recipe !== \"function\") throw new Error(\"if first argument is not a function, the second argument to produce should be a function\");\n        if (patchListener !== undefined && typeof patchListener !== \"function\") throw new Error(\"the third argument of a producer should not be set or a function\");\n      }\n      var result = void 0; // Only create proxies for plain objects/arrays.\n\n      if (!isDraftable(base)) {\n        result = recipe(base);\n        if (result === undefined) return base;\n      } // The given value must be proxied.\n      else {\n        this.scopes.push([]);\n        var baseDraft = this.createDraft(base);\n\n        try {\n          result = recipe.call(baseDraft, baseDraft);\n          this.willFinalize(result, baseDraft, !!patchListener); // Never generate patches when no listener exists.\n\n          var patches = patchListener && [],\n              inversePatches = patchListener && []; // Finalize the modified draft...\n\n          if (result === undefined || result === baseDraft) {\n            result = this.finalize(baseDraft, [], patches, inversePatches);\n          } // ...or use a replacement value.\n          else {\n            // Users must never modify the draft _and_ return something else.\n            if (baseDraft[DRAFT_STATE].modified) throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\"); // prettier-ignore\n            // Finalize the replacement in case it contains (or is) a subset of the draft.\n\n            if (isDraftable(result)) result = this.finalize(result);\n\n            if (patchListener) {\n              patches.push({\n                op: \"replace\",\n                path: [],\n                value: result\n              });\n              inversePatches.push({\n                op: \"replace\",\n                path: [],\n                value: base\n              });\n            }\n          }\n        } finally {\n          this.currentScope().forEach(function (state) {\n            return state.revoke();\n          });\n          this.scopes.pop();\n        }\n\n        patchListener && patchListener(patches, inversePatches);\n      } // Normalize the result.\n\n\n      return result === NOTHING ? undefined : result;\n    }\n  }, {\n    key: \"setAutoFreeze\",\n    value: function setAutoFreeze(value) {\n      this.autoFreeze = value;\n    }\n  }, {\n    key: \"setUseProxies\",\n    value: function setUseProxies(value) {\n      this.useProxies = value;\n      assign(this, value ? modernProxy : legacyProxy);\n    }\n  }, {\n    key: \"applyPatches\",\n    value: function applyPatches$$1(base, patches) {\n      // Mutate the base state when a draft is passed.\n      if (isDraft(base)) {\n        return applyPatches(base, patches);\n      } // Otherwise, produce a copy of the base state.\n\n\n      return this.produce(base, function (draft) {\n        return applyPatches(draft, patches);\n      });\n    }\n    /**\n     * @internal\n     * Finalize a draft, returning either the unmodified base state or a modified\n     * copy of the base state.\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize(draft, path, patches, inversePatches) {\n      var _this2 = this;\n\n      var state = draft[DRAFT_STATE];\n\n      if (!state) {\n        if (Object.isFrozen(draft)) return draft;\n        return this.finalizeTree(draft);\n      } // Never finalize drafts owned by an outer scope.\n\n\n      if (state.scope !== this.currentScope()) {\n        return draft;\n      }\n\n      if (!state.modified) return state.base;\n\n      if (!state.finalized) {\n        state.finalized = true;\n        this.finalizeTree(state.draft, path, patches, inversePatches);\n\n        if (this.onDelete) {\n          // The `assigned` object is unreliable with ES5 drafts.\n          if (this.useProxies) {\n            var assigned = state.assigned;\n\n            for (var prop in assigned) {\n              if (!assigned[prop]) this.onDelete(state, prop);\n            }\n          } else {\n            var base = state.base,\n                copy = state.copy;\n            each(base, function (prop) {\n              if (!has(copy, prop)) _this2.onDelete(state, prop);\n            });\n          }\n        }\n\n        if (this.onCopy) this.onCopy(state); // Nested producers must never auto-freeze their result,\n        // because it may contain drafts from parent producers.\n\n        if (this.autoFreeze && this.scopes.length === 1) {\n          Object.freeze(state.copy);\n        }\n\n        if (patches) generatePatches(state, path, patches, inversePatches);\n      }\n\n      return state.copy;\n    }\n    /**\n     * @internal\n     * Finalize all drafts in the given state tree.\n     */\n\n  }, {\n    key: \"finalizeTree\",\n    value: function finalizeTree(root, path, patches, inversePatches) {\n      var _this3 = this;\n\n      var state = root[DRAFT_STATE];\n\n      if (state) {\n        if (!this.useProxies) {\n          state.finalizing = true;\n          state.copy = shallowCopy(state.draft, true);\n          state.finalizing = false;\n        }\n\n        root = state.copy;\n      }\n\n      var onAssign = this.onAssign;\n\n      var finalizeProperty = function finalizeProperty(prop, value, parent) {\n        if (value === parent) {\n          throw Error(\"Immer forbids circular references\");\n        } // The only possible draft (in the scope of a `finalizeTree` call) is the `root` object.\n\n\n        var inDraft = !!state && parent === root;\n\n        if (isDraft(value)) {\n          value = // Patches are never generated for assigned properties.\n          patches && inDraft && !state.assigned[prop] ? _this3.finalize(value, path.concat(prop), patches, inversePatches) // prettier-ignore\n          : _this3.finalize(value); // Preserve non-enumerable properties.\n\n          if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n            parent[prop] = value;\n          } else {\n            Object.defineProperty(parent, prop, {\n              value: value\n            });\n          } // Unchanged drafts are never passed to the `onAssign` hook.\n\n\n          if (inDraft && value === state.base[prop]) return;\n        } // Unchanged draft properties are ignored.\n        else if (inDraft && is(value, state.base[prop])) {\n          return;\n        } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n        else if (isDraftable(value) && !Object.isFrozen(value)) {\n          each(value, finalizeProperty);\n        }\n\n        if (inDraft && onAssign) {\n          onAssign(state, prop, value);\n        }\n      };\n\n      each(root, finalizeProperty);\n      return root;\n    }\n  }]);\n  return Immer;\n}();\n\nvar immer = new Immer();\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\n\nvar produce = immer.produce;\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\n\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\n\nvar setUseProxies = immer.setUseProxies.bind(immer);\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\n\nvar applyPatches$1 = immer.applyPatches.bind(immer);\nexport { produce, setAutoFreeze, setUseProxies, applyPatches$1 as applyPatches, Immer, original, isDraft, isDraftable, NOTHING as nothing, DRAFTABLE as immerable };\nexport default produce;","map":{"version":3,"mappings":"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","names":["NOTHING","Symbol","DRAFTABLE","DRAFT_STATE","isDraft","value","isDraftable","Array","isArray","proto","Object","getPrototypeOf","prototype","constructor","original","base","assign","target","key","has","ownKeys","Reflect","getOwnPropertySymbols","getOwnPropertyNames","obj","concat","shallowCopy","invokeGetters","slice","clone","create","forEach","desc","getOwnPropertyDescriptor","get","Error","call","enumerable","defineProperty","each","cb","i","length","isEnumerable","prop","thing","hasOwnProperty","is","x","y","descriptors","scopes","currentScope","willFinalize","result","baseDraft","needPatches","scope","state","finalizing","undefined","markChangesRecursively","createDraft","parent","draft","clonePotentialDraft","push","revoke","revoked","source","copy","set","assigned","modified","markChanged","prepareCopy","proxyProperty","assertUnrevoked","JSON","stringify","markChangesSweep","hasArrayChanges","hasObjectChanges","object","keys","descriptor","createHiddenProperty","Proxy","revocable","arrayTraps","objectTraps","proxy","fn","arguments","apply","deleteProperty","isNaN","parseInt","drafts","finalized","isUnchanged","owner","writable","configurable","generatePatches","basePath","patches","inversePatches","generateArrayPatches","generateObjectPatches","minLength","Math","min","path","op","assignedValue","origValue","applyPatches","patch","join","verifyMinified","configDefaults","process","env","NODE_ENV","name","Immer","config","setUseProxies","useProxies","produce","bind","recipe","patchListener","defaultBase","args","_this","finalize","pop","autoFreeze","modernProxy","legacyProxy","isFrozen","finalizeTree","onDelete","_this2","onCopy","freeze","root","onAssign","finalizeProperty","inDraft","_this3","immer","setAutoFreeze"],"sources":["../src/common.js","../src/es5.js","../src/proxy.js","../src/patches.js","../src/immer.js","../src/index.js"],"sourcesContent":["export const NOTHING =\n    typeof Symbol !== \"undefined\"\n        ? Symbol(\"immer-nothing\")\n        : {[\"immer-nothing\"]: true}\n\nexport const DRAFTABLE =\n    typeof Symbol !== \"undefined\"\n        ? Symbol(\"immer-draftable\")\n        : \"__$immer_draftable\"\n\nexport const DRAFT_STATE =\n    typeof Symbol !== \"undefined\" ? Symbol(\"immer-state\") : \"__$immer_state\"\n\nexport function isDraft(value) {\n    return !!value && !!value[DRAFT_STATE]\n}\n\nexport function isDraftable(value) {\n    if (!value || typeof value !== \"object\") return false\n    if (Array.isArray(value)) return true\n    const proto = Object.getPrototypeOf(value)\n    if (!proto || proto === Object.prototype) return true\n    return !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE]\n}\n\nexport function original(value) {\n    if (value && value[DRAFT_STATE]) {\n        return value[DRAFT_STATE].base\n    }\n    // otherwise return undefined\n}\n\nexport const assign =\n    Object.assign ||\n    function assign(target, value) {\n        for (let key in value) {\n            if (has(value, key)) {\n                target[key] = value[key]\n            }\n        }\n        return target\n    }\n\nexport const ownKeys =\n    typeof Reflect !== \"undefined\" && Reflect.ownKeys\n        ? Reflect.ownKeys\n        : typeof Object.getOwnPropertySymbols !== \"undefined\"\n        ? obj =>\n              Object.getOwnPropertyNames(obj).concat(\n                  Object.getOwnPropertySymbols(obj)\n              )\n        : Object.getOwnPropertyNames\n\nexport function shallowCopy(base, invokeGetters = false) {\n    if (Array.isArray(base)) return base.slice()\n    const clone = Object.create(Object.getPrototypeOf(base))\n    ownKeys(base).forEach(key => {\n        if (key === DRAFT_STATE) {\n            return // Never copy over draft state.\n        }\n        const desc = Object.getOwnPropertyDescriptor(base, key)\n        if (desc.get) {\n            if (!invokeGetters) {\n                throw new Error(\"Immer drafts cannot have computed properties\")\n            }\n            desc.value = desc.get.call(base)\n        }\n        if (desc.enumerable) {\n            clone[key] = desc.value\n        } else {\n            Object.defineProperty(clone, key, {\n                value: desc.value,\n                writable: true,\n                configurable: true\n            })\n        }\n    })\n    return clone\n}\n\nexport function each(value, cb) {\n    if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i++) cb(i, value[i], value)\n    } else {\n        ownKeys(value).forEach(key => cb(key, value[key], value))\n    }\n}\n\nexport function isEnumerable(base, prop) {\n    return Object.getOwnPropertyDescriptor(base, prop).enumerable\n}\n\nexport function has(thing, prop) {\n    return Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\nexport function is(x, y) {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y\n    } else {\n        return x !== x && y !== y\n    }\n}\n","\"use strict\"\n// @ts-check\n\nimport {\n    each,\n    has,\n    is,\n    isDraft,\n    isDraftable,\n    isEnumerable,\n    shallowCopy,\n    DRAFT_STATE\n} from \"./common\"\n\nconst descriptors = {}\n\n// For nested produce calls:\nexport const scopes = []\nexport const currentScope = () => scopes[scopes.length - 1]\n\nexport function willFinalize(result, baseDraft, needPatches) {\n    const scope = currentScope()\n    scope.forEach(state => (state.finalizing = true))\n    if (result === undefined || result === baseDraft) {\n        if (needPatches) markChangesRecursively(baseDraft)\n        // This is faster when we don't care about which attributes changed.\n        markChangesSweep(scope)\n    }\n}\n\nexport function createDraft(base, parent) {\n    const isArray = Array.isArray(base)\n    const draft = clonePotentialDraft(base)\n    each(draft, prop => {\n        proxyProperty(draft, prop, isArray || isEnumerable(base, prop))\n    })\n\n    // See \"proxy.js\" for property documentation.\n    const state = {\n        scope: parent ? parent.scope : currentScope(),\n        modified: false,\n        finalizing: false, // es5 only\n        finalized: false,\n        assigned: {},\n        parent,\n        base,\n        draft,\n        copy: null,\n        revoke,\n        revoked: false // es5 only\n    }\n\n    createHiddenProperty(draft, DRAFT_STATE, state)\n    state.scope.push(state)\n    return draft\n}\n\nfunction revoke() {\n    this.revoked = true\n}\n\nfunction source(state) {\n    return state.copy || state.base\n}\n\nfunction get(state, prop) {\n    assertUnrevoked(state)\n    const value = source(state)[prop]\n    // Drafts are only created for proxyable values that exist in the base state.\n    if (!state.finalizing && value === state.base[prop] && isDraftable(value)) {\n        prepareCopy(state)\n        return (state.copy[prop] = createDraft(value, state))\n    }\n    return value\n}\n\nfunction set(state, prop, value) {\n    assertUnrevoked(state)\n    state.assigned[prop] = true\n    if (!state.modified) {\n        if (is(source(state)[prop], value)) return\n        markChanged(state)\n        prepareCopy(state)\n    }\n    state.copy[prop] = value\n}\n\nfunction markChanged(state) {\n    if (!state.modified) {\n        state.modified = true\n        if (state.parent) markChanged(state.parent)\n    }\n}\n\nfunction prepareCopy(state) {\n    if (!state.copy) state.copy = clonePotentialDraft(state.base)\n}\n\nfunction clonePotentialDraft(base) {\n    const state = base && base[DRAFT_STATE]\n    if (state) {\n        state.finalizing = true\n        const draft = shallowCopy(state.draft, true)\n        state.finalizing = false\n        return draft\n    }\n    return shallowCopy(base)\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n    let desc = descriptors[prop]\n    if (desc) {\n        desc.enumerable = enumerable\n    } else {\n        descriptors[prop] = desc = {\n            configurable: true,\n            enumerable,\n            get() {\n                return get(this[DRAFT_STATE], prop)\n            },\n            set(value) {\n                set(this[DRAFT_STATE], prop, value)\n            }\n        }\n    }\n    Object.defineProperty(draft, prop, desc)\n}\n\nfunction assertUnrevoked(state) {\n    if (state.revoked === true)\n        throw new Error(\n            \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n                JSON.stringify(source(state))\n        )\n}\n\n// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\nfunction markChangesSweep(scope) {\n    // The natural order of drafts in the `scope` array is based on when they\n    // were accessed. By processing drafts in reverse natural order, we have a\n    // better chance of processing leaf nodes first. When a leaf node is known to\n    // have changed, we can avoid any traversal of its ancestor nodes.\n    for (let i = scope.length - 1; i >= 0; i--) {\n        const state = scope[i]\n        if (state.modified === false) {\n            if (Array.isArray(state.base)) {\n                if (hasArrayChanges(state)) markChanged(state)\n            } else if (hasObjectChanges(state)) markChanged(state)\n        }\n    }\n}\n\nfunction markChangesRecursively(object) {\n    if (!object || typeof object !== \"object\") return\n    const state = object[DRAFT_STATE]\n    if (!state) return\n    const {base, draft, assigned} = state\n    if (!Array.isArray(object)) {\n        // Look for added keys.\n        Object.keys(draft).forEach(key => {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (base[key] === undefined && !has(base, key)) {\n                assigned[key] = true\n                markChanged(state)\n            } else if (!assigned[key]) {\n                // Only untouched properties trigger recursion.\n                markChangesRecursively(draft[key])\n            }\n        })\n        // Look for removed keys.\n        Object.keys(base).forEach(key => {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (draft[key] === undefined && !has(draft, key)) {\n                assigned[key] = false\n                markChanged(state)\n            }\n        })\n    } else if (hasArrayChanges(state)) {\n        markChanged(state)\n        assigned.length = true\n        if (draft.length < base.length) {\n            for (let i = draft.length; i < base.length; i++) assigned[i] = false\n        } else {\n            for (let i = base.length; i < draft.length; i++) assigned[i] = true\n        }\n        for (let i = 0; i < draft.length; i++) {\n            // Only untouched indices trigger recursion.\n            if (assigned[i] === undefined) markChangesRecursively(draft[i])\n        }\n    }\n}\n\nfunction hasObjectChanges(state) {\n    const {base, draft} = state\n\n    // Search for added keys. Start at the back, because non-numeric keys\n    // are ordered by time of definition on the object.\n    const keys = Object.keys(draft)\n    for (let i = keys.length - 1; i >= 0; i--) {\n        // The `undefined` check is a fast path for pre-existing keys.\n        if (base[keys[i]] === undefined && !has(base, keys[i])) {\n            return true\n        }\n    }\n\n    // Since no keys have been added, we can compare lengths to know if an\n    // object has been deleted.\n    return keys.length !== Object.keys(base).length\n}\n\nfunction hasArrayChanges(state) {\n    const {draft} = state\n    if (draft.length !== state.base.length) return true\n    // See #116\n    // If we first shorten the length, our array interceptors will be removed.\n    // If after that new items are added, result in the same original length,\n    // those last items will have no intercepting property.\n    // So if there is no own descriptor on the last position, we know that items were removed and added\n    // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n    // the last one\n    const descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1)\n    // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n    if (descriptor && !descriptor.get) return true\n    // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n    return false\n}\n\nfunction createHiddenProperty(target, prop, value) {\n    Object.defineProperty(target, prop, {\n        value: value,\n        enumerable: false,\n        writable: true\n    })\n}\n","\"use strict\"\n// @ts-check\n\nimport {\n    assign,\n    each,\n    has,\n    is,\n    isDraftable,\n    isDraft,\n    shallowCopy,\n    DRAFT_STATE\n} from \"./common\"\n\n// For nested produce calls:\nexport const scopes = []\nexport const currentScope = () => scopes[scopes.length - 1]\n\n// Do nothing before being finalized.\nexport function willFinalize() {}\n\nexport function createDraft(base, parent) {\n    const state = {\n        // Track which produce call this is associated with.\n        scope: parent ? parent.scope : currentScope(),\n        // True for both shallow and deep changes.\n        modified: false,\n        // Used during finalization.\n        finalized: false,\n        // Track which properties have been assigned (true) or deleted (false).\n        assigned: {},\n        // The parent draft state.\n        parent,\n        // The base state.\n        base,\n        // The base proxy.\n        draft: null,\n        // Any property proxies.\n        drafts: {},\n        // The base copy with any updated values.\n        copy: null,\n        // Called by the `produce` function.\n        revoke: null\n    }\n\n    const {revoke, proxy} = Array.isArray(base)\n        ? Proxy.revocable([state], arrayTraps)\n        : Proxy.revocable(state, objectTraps)\n\n    state.draft = proxy\n    state.revoke = revoke\n\n    state.scope.push(state)\n    return proxy\n}\n\nconst objectTraps = {\n    get,\n    has(target, prop) {\n        return prop in source(target)\n    },\n    ownKeys(target) {\n        return Reflect.ownKeys(source(target))\n    },\n    set,\n    deleteProperty,\n    getOwnPropertyDescriptor,\n    defineProperty() {\n        throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\") // prettier-ignore\n    },\n    getPrototypeOf(target) {\n        return Object.getPrototypeOf(target.base)\n    },\n    setPrototypeOf() {\n        throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\") // prettier-ignore\n    }\n}\n\nconst arrayTraps = {}\neach(objectTraps, (key, fn) => {\n    arrayTraps[key] = function() {\n        arguments[0] = arguments[0][0]\n        return fn.apply(this, arguments)\n    }\n})\narrayTraps.deleteProperty = function(state, prop) {\n    if (isNaN(parseInt(prop))) {\n        throw new Error(\"Immer only supports deleting array indices\") // prettier-ignore\n    }\n    return objectTraps.deleteProperty.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n    if (prop !== \"length\" && isNaN(parseInt(prop))) {\n        throw new Error(\"Immer only supports setting array indices and the 'length' property\") // prettier-ignore\n    }\n    return objectTraps.set.call(this, state[0], prop, value)\n}\n\nfunction source(state) {\n    return state.copy || state.base\n}\n\nfunction get(state, prop) {\n    if (prop === DRAFT_STATE) return state\n    let {drafts} = state\n\n    // Check for existing draft in unmodified state.\n    if (!state.modified && has(drafts, prop)) {\n        return drafts[prop]\n    }\n\n    const value = source(state)[prop]\n    if (state.finalized || !isDraftable(value)) return value\n\n    // Check for existing draft in modified state.\n    if (state.modified) {\n        // Assigned values are never drafted. This catches any drafts we created, too.\n        if (value !== state.base[prop]) return value\n        // Store drafts on the copy (when one exists).\n        drafts = state.copy\n    }\n\n    return (drafts[prop] = createDraft(value, state))\n}\n\nfunction set(state, prop, value) {\n    if (!state.modified) {\n        // Optimize based on value's truthiness. Truthy values are guaranteed to\n        // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n        // values may be drafts, but falsy values are never drafts.\n        const isUnchanged = value\n            ? is(state.base[prop], value) || value === state.drafts[prop]\n            : is(state.base[prop], value) && prop in state.base\n        if (isUnchanged) return true\n        markChanged(state)\n    }\n    state.assigned[prop] = true\n    state.copy[prop] = value\n    return true\n}\n\nfunction deleteProperty(state, prop) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (state.base[prop] !== undefined || prop in state.base) {\n        state.assigned[prop] = false\n        markChanged(state)\n    }\n    if (state.copy) delete state.copy[prop]\n    return true\n}\n\nfunction getOwnPropertyDescriptor(state, prop) {\n    const owner = source(state)\n    const desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n    if (desc) {\n        desc.writable = true\n        desc.configurable = !Array.isArray(owner) || prop !== \"length\"\n    }\n    return desc\n}\n\nfunction markChanged(state) {\n    if (!state.modified) {\n        state.modified = true\n        state.copy = assign(shallowCopy(state.base), state.drafts)\n        state.drafts = null\n        if (state.parent) markChanged(state.parent)\n    }\n}\n","import {each} from \"./common\"\n\nexport function generatePatches(state, basePath, patches, inversePatches) {\n    Array.isArray(state.base)\n        ? generateArrayPatches(state, basePath, patches, inversePatches)\n        : generateObjectPatches(state, basePath, patches, inversePatches)\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n    const {base, copy, assigned} = state\n    const minLength = Math.min(base.length, copy.length)\n\n    // Look for replaced indices.\n    for (let i = 0; i < minLength; i++) {\n        if (assigned[i] && base[i] !== copy[i]) {\n            const path = basePath.concat(i)\n            patches.push({op: \"replace\", path, value: copy[i]})\n            inversePatches.push({op: \"replace\", path, value: base[i]})\n        }\n    }\n\n    // Did the array expand?\n    if (minLength < copy.length) {\n        for (let i = minLength; i < copy.length; i++) {\n            patches.push({\n                op: \"add\",\n                path: basePath.concat(i),\n                value: copy[i]\n            })\n        }\n        inversePatches.push({\n            op: \"replace\",\n            path: basePath.concat(\"length\"),\n            value: base.length\n        })\n    }\n\n    // ...or did it shrink?\n    else if (minLength < base.length) {\n        patches.push({\n            op: \"replace\",\n            path: basePath.concat(\"length\"),\n            value: copy.length\n        })\n        for (let i = minLength; i < base.length; i++) {\n            inversePatches.push({\n                op: \"add\",\n                path: basePath.concat(i),\n                value: base[i]\n            })\n        }\n    }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n    const {base, copy} = state\n    each(state.assigned, (key, assignedValue) => {\n        const origValue = base[key]\n        const value = copy[key]\n        const op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\"\n        if (origValue === value && op === \"replace\") return\n        const path = basePath.concat(key)\n        patches.push(op === \"remove\" ? {op, path} : {op, path, value})\n        inversePatches.push(\n            op === \"add\"\n                ? {op: \"remove\", path}\n                : op === \"remove\"\n                ? {op: \"add\", path, value: origValue}\n                : {op: \"replace\", path, value: origValue}\n        )\n    })\n}\n\nexport function applyPatches(draft, patches) {\n    for (let i = 0; i < patches.length; i++) {\n        const patch = patches[i]\n        const {path} = patch\n        if (path.length === 0 && patch.op === \"replace\") {\n            draft = patch.value\n        } else {\n            let base = draft\n            for (let i = 0; i < path.length - 1; i++) {\n                base = base[path[i]]\n                if (!base || typeof base !== \"object\")\n                    throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")) // prettier-ignore\n            }\n            const key = path[path.length - 1]\n            switch (patch.op) {\n                case \"replace\":\n                case \"add\":\n                    // TODO: add support is not extensive, it does not support insertion or `-` atm!\n                    base[key] = patch.value\n                    break\n                case \"remove\":\n                    if (Array.isArray(base)) {\n                        if (key !== base.length - 1)\n                            throw new Error(`Only the last index of an array can be removed, index: ${key}, length: ${base.length}`) // prettier-ignore\n                        base.length -= 1\n                    } else {\n                        delete base[key]\n                    }\n                    break\n                default:\n                    throw new Error(\"Unsupported patch operation: \" + patch.op)\n            }\n        }\n    }\n    return draft\n}\n","import * as legacyProxy from \"./es5\"\nimport * as modernProxy from \"./proxy\"\nimport {applyPatches, generatePatches} from \"./patches\"\nimport {\n    assign,\n    each,\n    has,\n    is,\n    isDraft,\n    isDraftable,\n    isEnumerable,\n    shallowCopy,\n    DRAFT_STATE,\n    NOTHING\n} from \"./common\"\n\nfunction verifyMinified() {}\n\nconst configDefaults = {\n    useProxies: typeof Proxy !== \"undefined\" && typeof Reflect !== \"undefined\",\n    autoFreeze:\n        typeof process !== \"undefined\"\n            ? process.env.NODE_ENV !== \"production\"\n            : verifyMinified.name === \"verifyMinified\",\n    onAssign: null,\n    onDelete: null,\n    onCopy: null\n}\n\nexport class Immer {\n    constructor(config) {\n        assign(this, configDefaults, config)\n        this.setUseProxies(this.useProxies)\n        this.produce = this.produce.bind(this)\n    }\n    produce(base, recipe, patchListener) {\n        // curried invocation\n        if (typeof base === \"function\" && typeof recipe !== \"function\") {\n            const defaultBase = recipe\n            recipe = base\n\n            // prettier-ignore\n            return (base = defaultBase, ...args) =>\n                this.produce(base, draft => recipe.call(draft, draft, ...args))\n        }\n\n        // prettier-ignore\n        {\n            if (typeof recipe !== \"function\") throw new Error(\"if first argument is not a function, the second argument to produce should be a function\")\n            if (patchListener !== undefined && typeof patchListener !== \"function\") throw new Error(\"the third argument of a producer should not be set or a function\")\n        }\n\n        let result\n        // Only create proxies for plain objects/arrays.\n        if (!isDraftable(base)) {\n            result = recipe(base)\n            if (result === undefined) return base\n        }\n        // The given value must be proxied.\n        else {\n            this.scopes.push([])\n            const baseDraft = this.createDraft(base)\n            try {\n                result = recipe.call(baseDraft, baseDraft)\n                this.willFinalize(result, baseDraft, !!patchListener)\n\n                // Never generate patches when no listener exists.\n                var patches = patchListener && [],\n                    inversePatches = patchListener && []\n\n                // Finalize the modified draft...\n                if (result === undefined || result === baseDraft) {\n                    result = this.finalize(\n                        baseDraft,\n                        [],\n                        patches,\n                        inversePatches\n                    )\n                }\n                // ...or use a replacement value.\n                else {\n                    // Users must never modify the draft _and_ return something else.\n                    if (baseDraft[DRAFT_STATE].modified)\n                        throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\") // prettier-ignore\n\n                    // Finalize the replacement in case it contains (or is) a subset of the draft.\n                    if (isDraftable(result)) result = this.finalize(result)\n\n                    if (patchListener) {\n                        patches.push({\n                            op: \"replace\",\n                            path: [],\n                            value: result\n                        })\n                        inversePatches.push({\n                            op: \"replace\",\n                            path: [],\n                            value: base\n                        })\n                    }\n                }\n            } finally {\n                this.currentScope().forEach(state => state.revoke())\n                this.scopes.pop()\n            }\n            patchListener && patchListener(patches, inversePatches)\n        }\n        // Normalize the result.\n        return result === NOTHING ? undefined : result\n    }\n    setAutoFreeze(value) {\n        this.autoFreeze = value\n    }\n    setUseProxies(value) {\n        this.useProxies = value\n        assign(this, value ? modernProxy : legacyProxy)\n    }\n    applyPatches(base, patches) {\n        // Mutate the base state when a draft is passed.\n        if (isDraft(base)) {\n            return applyPatches(base, patches)\n        }\n        // Otherwise, produce a copy of the base state.\n        return this.produce(base, draft => applyPatches(draft, patches))\n    }\n    /**\n     * @internal\n     * Finalize a draft, returning either the unmodified base state or a modified\n     * copy of the base state.\n     */\n    finalize(draft, path, patches, inversePatches) {\n        const state = draft[DRAFT_STATE]\n        if (!state) {\n            if (Object.isFrozen(draft)) return draft\n            return this.finalizeTree(draft)\n        }\n        // Never finalize drafts owned by an outer scope.\n        if (state.scope !== this.currentScope()) {\n            return draft\n        }\n        if (!state.modified) return state.base\n        if (!state.finalized) {\n            state.finalized = true\n            this.finalizeTree(state.draft, path, patches, inversePatches)\n            if (this.onDelete) {\n                // The `assigned` object is unreliable with ES5 drafts.\n                if (this.useProxies) {\n                    const {assigned} = state\n                    for (const prop in assigned) {\n                        if (!assigned[prop]) this.onDelete(state, prop)\n                    }\n                } else {\n                    const {base, copy} = state\n                    each(base, prop => {\n                        if (!has(copy, prop)) this.onDelete(state, prop)\n                    })\n                }\n            }\n            if (this.onCopy) this.onCopy(state)\n\n            // Nested producers must never auto-freeze their result,\n            // because it may contain drafts from parent producers.\n            if (this.autoFreeze && this.scopes.length === 1) {\n                Object.freeze(state.copy)\n            }\n\n            if (patches) generatePatches(state, path, patches, inversePatches)\n        }\n        return state.copy\n    }\n    /**\n     * @internal\n     * Finalize all drafts in the given state tree.\n     */\n    finalizeTree(root, path, patches, inversePatches) {\n        const state = root[DRAFT_STATE]\n        if (state) {\n            if (!this.useProxies) {\n                state.finalizing = true\n                state.copy = shallowCopy(state.draft, true)\n                state.finalizing = false\n            }\n            root = state.copy\n        }\n\n        const {onAssign} = this\n        const finalizeProperty = (prop, value, parent) => {\n            if (value === parent) {\n                throw Error(\"Immer forbids circular references\")\n            }\n\n            // The only possible draft (in the scope of a `finalizeTree` call) is the `root` object.\n            const inDraft = !!state && parent === root\n\n            if (isDraft(value)) {\n                value =\n                    // Patches are never generated for assigned properties.\n                    patches && inDraft && !state.assigned[prop]\n                        ? this.finalize(value, path.concat(prop), patches, inversePatches) // prettier-ignore\n                        : this.finalize(value)\n\n                // Preserve non-enumerable properties.\n                if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n                    parent[prop] = value\n                } else {\n                    Object.defineProperty(parent, prop, {value})\n                }\n\n                // Unchanged drafts are never passed to the `onAssign` hook.\n                if (inDraft && value === state.base[prop]) return\n            }\n            // Unchanged draft properties are ignored.\n            else if (inDraft && is(value, state.base[prop])) {\n                return\n            }\n            // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n            else if (isDraftable(value) && !Object.isFrozen(value)) {\n                each(value, finalizeProperty)\n            }\n\n            if (inDraft && onAssign) {\n                onAssign(state, prop, value)\n            }\n        }\n\n        each(root, finalizeProperty)\n        return root\n    }\n}\n","import {Immer} from \"./immer\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce = immer.produce\nexport default produce\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\nexport {\n    original,\n    isDraft,\n    isDraftable,\n    NOTHING as nothing,\n    DRAFTABLE as immerable\n} from \"./common\"\n\nexport {Immer}\n"]},"metadata":{},"sourceType":"module"}